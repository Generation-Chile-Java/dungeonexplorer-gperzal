{
  "intro": {
    "hero": "¡Bienvenido, valiente Héroe {name}! \nEl Reino del Código, una vez próspero y lleno de armonía, ahora se encuentra al borde del colapso. \nLos temibles Bugs, criaturas maliciosas que corrompen la lógica y oscurecen la claridad del código, han invadido nuestras tierras. \nSu objetivo es apoderarse de los Tesoros Sagrados: el Tesoro del Conocimiento y la Llave del Conocimiento, \nartefactos ancestrales que mantienen el equilibrio y la sabiduría de nuestro mundo.\n\nTu misión, noble Héroe, es adentrarte en las profundidades de los Bosques de Sintaxis, \ncruzar los Ríos de Algoritmos y escalar las Montañas de Depuración para recuperar estos tesoros. \nEn tu camino, enfrentarás desafíos que pondrán a prueba tu ingenio, tu valentía y tu habilidad para resolver problemas. \nSolo dominando los Bugs y restaurando el orden en el código podrás salvar nuestro reino.\n\n\uD83C\uDF1F Recuerda: cada línea de código que repares, cada Bug que derrotes y cada pista que descifres te acercará más a tu objetivo. \nEl destino del Reino del Código está en tus manos. ⚙\uFE0F¡Que la lógica te guíe!\uD83D\uDCBB",
    "heroine": "¡Bienvenida, valiente Heroína {name}! \nEl Reino del Código, una vez próspero y lleno de armonía, ahora se encuentra al borde del colapso. \nLos temibles Bugs, criaturas maliciosas que corrompen la lógica y oscurecen la claridad del código, han invadido nuestras tierras. \nSu objetivo es apoderarse de los Tesoros Sagrados: el Tesoro del Conocimiento y la Llave del Conocimiento, \nartefactos ancestrales que mantienen el equilibrio y la sabiduría de nuestro mundo.\n\nTu misión, noble Heroína, es adentrarte en las profundidades de los Bosques de Sintaxis, \ncruzar los Ríos de Algoritmos y escalar las Montañas de Depuración para recuperar estos tesoros. \nEn tu camino, enfrentarás desafíos que pondrán a prueba tu ingenio, tu valentía y tu habilidad para resolver problemas. \nSolo dominando los Bugs y restaurando el orden en el código podrás salvar nuestro reino.\n\n\uD83C\uDF1F Recuerda: cada línea de código que repares, cada Bug que derrotes y cada pista que descifres te acercará más a tu objetivo. \nEl destino del Reino del Código está en tus manos. ⚙\uFE0F¡Que la lógica te guíe!\uD83D\uDCBB"
  },
  "dialogues": {
    "trainee": {
      "questions": [
        {
          "question": "¿Qué error se produce en: System.out.print(Hola Mundo)?",
          "answers": [
            "Error de comillas",
            "Error de punto y coma",
            "Ambos"
          ],
          "correct": 2,
          "feedback": [
            "\n\uD83D\uDDE3\uFE0F Recuerda que el texto debe ir entre comillas.",
            "\n\uD83D\uDDE3\uFE0F El punto y coma es obligatorio para terminar la sentencia.",
            "\n✨¡Lo estás haciendo genial! ✨ Ambos errores son comunes en este ejemplo."
          ]
        },
        {
          "question": "¿Cuál es la sintaxis correcta para declarar una variable en Java?",
          "answers": [
            "int variable = 10;",
            "int variable == 10;",
            "int variable := 10;"
          ],
          "correct": 0,
          "feedback": [
            "\n✨¡Correcto!✨ Se usa el símbolo = para asignar valores.",
            "\n\uD83D\uDDE3\uFE0FEl operador == se utiliza para comparar, no para asignar.",
            "\n\uD83D\uDDE3\uFE0FEl operador := no es válido en Java."
          ]
        },
        {
          "question": "¿Cómo se inicia un bloque de código en Java?",
          "answers": [
            "Con {",
            "Con (",
            "Con ["
          ],
          "correct": 0,
          "feedback": [
            "\n✨¡Vas por buen camino!✨ Se inicia un bloque de código con llaves {}.",
            "\n\uD83D\uDDE3\uFE0F Los paréntesis se usan para métodos y expresiones.",
            "\n\uD83D\uDDE3\uFE0F Los corchetes se utilizan para arrays."
          ]
        },
        {
          "question": "¿Qué palabra clave se utiliza para definir una clase en Java?",
          "answers": [
            "class",
            "Class",
            "clase"
          ],
          "correct": 0,
          "feedback": [
            "\n✨¡Correcto!✨ La palabra clave es 'class' en minúsculas.",
            "\n\uD83D\uDDE3\uFE0F Recuerda que en Java las palabras clave son sensibles a mayúsculas.",
            "\n\uD83D\uDDE3\uFE0F La opción 'clase' no es válida en Java."
          ]
        },
        {
          "question": "¿Qué método se utiliza para leer datos desde la consola en Java?",
          "answers": [
            "System.in.read()",
            "Scanner.next()",
            "Console.read()"
          ],
          "correct": 1,
          "feedback": [
            "\n\uD83D\uDDE3\uFE0F Ese método no es el más habitual para la lectura de la consola.",
            "\n ✨¡Eres un crack!✨ Se utiliza la clase Scanner.",
            "\n\uD83D\uDDE3\uFE0F No existe un método llamado Console.read() en Java estándar."
          ]
        }
      ]
    },
    "junior": {
      "questions": [
        {
          "question": "¿Qué método se utiliza para imprimir una línea en consola en Java?",
          "answers": [
            "System.out.print()",
            "System.out.println()",
            "Console.log()"
          ],
          "correct": 1,
          "feedback": [
            "\n\uD83D\uDDE3\uFE0F Incorrecto, este método imprime sin salto de línea.",
            "\n✨¡Sigue así!✨ System.out.println() imprime con salto de línea.",
            "\n\uD83D\uDDE3\uFE0F Console.log() no forma parte de Java."
          ]
        },
        {
          "question": "¿Cómo se declara un arreglo en Java?",
          "answers": [
            "int[] arr = new int[5];",
            "int arr = new int[5];",
            "array arr = new int[5];"
          ],
          "correct": 0,
          "feedback": [
            "\n✨¡Increíble, sigue así!✨ Se declara de la forma int[] arr = new int[5];",
            "\n\uD83D\uDDE3\uFE0F Recuerda que los arreglos en Java se definen con [].",
            "\n\uD83D\uDDE3\uFE0F La palabra 'array' no es válida en Java."
          ]
        },
        {
          "question": "¿Qué modificador de acceso permite que una variable sea accesible solo dentro de su clase?",
          "answers": [
            "private",
            "public",
            "protected"
          ],
          "correct": 0,
          "feedback": [
            "\n✨¡Lo estás haciendo genial!✨ 'private' restringe el acceso a la clase.",
            "\n\uD83D\uDDE3\uFE0F El modificador 'public' permite acceso desde cualquier parte.",
            "\n\uD83D\uDDE3\uFE0F El modificador 'protected' permite acceso a clases derivadas."
          ]
        },
        {
          "question": "¿Qué palabra clave se utiliza para heredar de una clase en Java?",
          "answers": [
            "extends",
            "implements",
            "inherits"
          ],
          "correct": 0,
          "feedback": [
            "\n✨¡Vas por buen camino!✨ Se utiliza 'extends' para heredar de una clase.",
            "\n\uD83D\uDDE3\uFE0F La palabra 'implements' se utiliza para implementar interfaces.",
            "\n\uD83D\uDDE3\uFE0F La palabra 'inherits' no existe en Java."
          ]
        },
        {
          "question": "¿Cómo se define una interfaz en Java?",
          "answers": [
            "interface Nombre {}",
            "class Nombre {}",
            "abstract Nombre {}"
          ],
          "correct": 0,
          "feedback": [
            "\n✨¡Eres un crack!✨ Las interfaces se definen con la palabra clave 'interface'.",
            "\n\uD83D\uDDE3\uFE0F Una clase no es una interfaz.",
            "\n\uD83D\uDDE3\uFE0F El modificador abstract no se utiliza para definir interfaces."
          ]
        }
      ]
    },
    "senior": {
      "questions": [
        {
          "question": "¿Qué característica de la POO permite utilizar el mismo método en diferentes clases?",
          "answers": [
            "Polimorfismo",
            "Encapsulamiento",
            "Herencia"
          ],
          "correct": 0,
          "feedback": [
            "\n✨¡Sigue así!✨ El polimorfismo permite esa flexibilidad.",
            "\n\uD83D\uDDE3\uFE0F El encapsulamiento se refiere a la ocultación de datos.",
            "\n\uD83D\uDDE3\uFE0F La herencia permite extender funcionalidades, pero no reutilizar el mismo método de forma polimórfica."
          ]
        },
        {
          "question": "¿Cuál es la ventaja principal de usar interfaces en Java?",
          "answers": [
            "Fomentan el desacoplamiento y la abstracción",
            "Aumentan el acoplamiento entre clases",
            "Hacen el código más largo"
          ],
          "correct": 0,
          "feedback": [
            "\n✨¡Lo estás haciendo genial!✨ Las interfaces permiten desacoplar componentes y promover la abstracción.",
            "\n\uD83D\uDDE3\uFE0F Al contrario, las interfaces ayudan a disminuir el acoplamiento.",
            "\n\uD83D\uDDE3\uFE0F El objetivo es escribir código limpio y modular, no más extenso."
          ]
        },
        {
          "question": "¿Qué es el 'polimorfismo' en el contexto de la programación orientada a objetos?",
          "answers": [
            "La capacidad de un objeto para tomar muchas formas",
            "La capacidad de heredar atributos de múltiples clases",
            "La capacidad de encapsular datos"
          ],
          "correct": 0,
          "feedback": [
            "\n✨¡Vas por buen camino!✨ El polimorfismo permite que un objeto se comporte de diferentes maneras según su contexto.",
            "\n\uD83D\uDDE3\uFE0F Java no soporta herencia múltiple, por lo tanto esta opción es incorrecta.",
            "\n\uD83D\uDDE3\uFE0F El encapsulamiento es un concepto diferente."
          ]
        },
        {
          "question": "¿Qué significa encapsulación en POO?",
          "answers": [
            "Ocultar los detalles internos y exponer solo lo necesario",
            "Heredar de una clase base",
            "Permitir múltiples formas de un método"
          ],
          "correct": 0,
          "feedback": [
            "\n✨¡Eres un crack!✨ La encapsulación es la práctica de ocultar los detalles internos.",
            "\n\uD83D\uDDE3\uFE0F La herencia es otro concepto de la POO.",
            "\n\uD83D\uDDE3\uFE0F Eso se refiere al polimorfismo, no a la encapsulación."
          ]
        },
        {
          "question": "¿Cuál es el objetivo principal de la abstracción en POO?",
          "answers": [
            "Simplificar la complejidad mediante modelos",
            "Complejizar el código",
            "Reducir la reutilización"
          ],
          "correct": 0,
          "feedback": [
            "\n ✨¡Sigue así!✨ La abstracción busca simplificar la complejidad del sistema.",
            "\n\uD83D\uDDE3\uFE0F El objetivo es justamente lo opuesto.",
            "\n\uD83D\uDDE3\uFE0F La reutilización es un beneficio de otros conceptos, pero no el principal objetivo de la abstracción."
          ]
        }
      ]
    },
    "final": {
      "message": "⭐⭐ ¡Felicidades, {name}! ⭐⭐ \nHas completado los desafíos del reino del código </> \uD83E\uDD16, demostrando tu valía desde el nivel Trainee, pasando por Junior, hasta alcanzar el estatus Senior. \nAhora estás listo para dar el siguiente paso: asumir roles de liderazgo en proyectos ambiciosos y enfrentar nuevas aventuras en el mundo del desarrollo. \n\uD83D\uDE80¡Adelante, el futuro te espera!\uD83D\uDE80"
    }
  }
}
